---
description:
globs: *.py
alwaysApply: false
---
# Testing Patterns for md2term

## Test Structure
All tests should be in `tests/test_md2term.py` following the existing pattern with organized test classes.

## Snapshot Testing with Syrupy

### Overview
We use [Syrupy](mdc:https:/github.com/syrupy-project/syrupy) for snapshot testing to validate terminal output formatting. This ensures that any changes to markdown rendering are immediately detected.

### Test Organization
Tests are organized into logical classes:

```python
class TestMarkdownFeatures:
    """Test all markdown features with snapshot testing."""

class TestCLIInterface:
    """Test the CLI interface with snapshot testing."""

class TestEdgeCases:
    """Test edge cases and error conditions."""

class TestSpecialCharacters:
    """Test handling of special characters and Unicode."""
```

### Snapshot Test Pattern
```python
def test_feature_name(self, snapshot):
    """Test description."""
    markdown = "# Test\n\nThis is **bold** text."

    # Capture output using StringIO and Rich Console
    output = io.StringIO()
    console = Console(file=output, width=80, force_terminal=True)
    renderer = TerminalRenderer(console)

    # Parse and render markdown
    import mistune
    markdown_parser = mistune.create_markdown(renderer=None)
    tokens = markdown_parser(markdown)
    renderer.render(tokens)

    # Assert against snapshot
    result = output.getvalue()
    assert result == snapshot
```

### CLI Snapshot Testing
```python
def test_cli_feature(self, snapshot):
    """Test CLI with snapshot validation."""
    runner = CliRunner()
    result = runner.invoke(main, ["--option"], input="test input")
    # Note: CLI may have exit code 1 due to streaming, focus on output
    assert result.output == snapshot
```

### Snapshot Management Commands

```bash
# Run tests normally (fails if snapshots don't match)
uv run pytest

# Update snapshots when output changes
uv run pytest --snapshot-update

# Run specific test with snapshots
uv run pytest tests/test_md2term.py::TestMarkdownFeatures::test_headings_all_levels

# View snapshot details
uv run pytest --snapshot-details
```

### Snapshot Files
- Snapshots are stored in `tests/__snapshots__/test_md2term.ambr`
- Contains ANSI color codes and terminal formatting
- Should be committed to version control
- Review snapshot changes carefully in PRs

### When to Update Snapshots
- ✅ **Intentional output changes**: New features, improved formatting
- ✅ **Bug fixes**: Correcting incorrect output
- ❌ **Accidental changes**: Always investigate unexpected snapshot failures

## Required Test Categories

### Markdown Feature Tests (with snapshots)
- All heading levels (H1-H6)
- Text formatting (bold, italic, inline code, links)
- Code blocks with syntax highlighting (Python, JavaScript, Bash, no language)
- Lists (ordered and unordered) with formatting
- Blockquotes (single and multiple)
- Horizontal rules
- Mixed content with various elements
- Complete document rendering

### CLI Tests (with snapshots)
- File input processing
- Stdin input processing
- Width option (`--width`)
- Version command (`--version`)
- Help command (`--help`)
- Error handling (nonexistent files)

### Edge Case Tests (with snapshots)
- Empty input
- Whitespace-only input
- Nested formatting elements
- Very narrow terminal width
- Unicode characters and emojis
- Escaped markdown characters

### Legacy Tests (without snapshots)
- Basic functionality validation
- Ensure no crashes on valid input

## Test Data Patterns

### Sample Markdown Inputs
```python
SIMPLE_MARKDOWN = "# Hello\n\nThis is **bold** text."
COMPLEX_MARKDOWN = """
# Main Title

## Subtitle

This is a paragraph with **bold** and *italic* text.

- List item 1
- List item 2

```python
def hello():
    print("world")
```

> This is a blockquote
"""
```

### Console Setup Pattern
```python
# Standard console setup for consistent snapshots
output = io.StringIO()
console = Console(file=output, width=80, force_terminal=True)
renderer = TerminalRenderer(console)
```

## Snapshot Testing Best Practices

### 1. Consistent Terminal Width
Always use `width=80` for consistent snapshots across environments.

### 2. Force Terminal Mode
Use `force_terminal=True` to ensure ANSI codes are generated.

### 3. Test Real Features
Each test should focus on a specific markdown feature from `example.md`.

### 4. Descriptive Test Names
Use clear, descriptive test names that explain what feature is being tested.

### 5. Organized Test Classes
Group related tests into logical classes for better organization.

### 6. Review Snapshot Changes
Always review snapshot file changes in PRs to ensure they're intentional.

## Dependencies
- `syrupy>=4.0.0` for snapshot testing
- `pytest>=7.0.0` for test framework
- `click.testing.CliRunner` for CLI tests

## Test Execution
```bash
# Run all tests
uv run pytest

# Run with verbose output
uv run pytest -v

# Run specific test class
uv run pytest tests/test_md2term.py::TestMarkdownFeatures

# Update snapshots after intentional changes
uv run pytest --snapshot-update
```
